/**
 * 入金取引ファクトリー
 */
import { AccountType } from '../account';
import * as MoneyTransferActionFactory from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import { IClientUser } from '../clientUser';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams<T extends AccountType> = TransactionFactory.IStartParams<TransactionType.Deposit, IAgent, IRecipient, IObject<T>>;
export interface IRecipient {
    typeOf: string;
    id?: string;
    name: string;
    url?: string;
}
export interface IAgent {
    typeOf: string;
    id?: string;
    name: string;
    url?: string;
}
export type IResult = any;
/**
 * error interface
 * エラーインターフェース
 */
export type IError = any;
/**
 * object of a transaction interface
 * 取引対象物インターフェース
 */
export interface IObject<T extends AccountType> {
    clientUser?: IClientUser;
    /**
     * 金額
     */
    amount: number;
    /**
     * 口座タイプ
     */
    accountType: T;
    /**
     * 入金先口座番号
     */
    toAccountNumber: string;
    notes: string;
}
export interface IPotentialActions<T extends AccountType> {
    moneyTransfer: MoneyTransferActionFactory.IAttributes<T>;
}
export type ITransaction<T extends AccountType> = IExtendId<IAttributes<T>>;
/**
 * 入金取引属性インターフェース
 */
export interface IAttributes<T extends AccountType>
    extends TransactionFactory.IAttributes<IStartParams<T>, IResult, IError, IPotentialActions<T>> {
}
