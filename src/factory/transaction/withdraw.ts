import { AccountType } from '../account';
import { IAccount, IAnonymousLocation, IAttributes as IMoneyTransferActionAttributes } from '../action/transfer/moneyTransfer';
import { IExtendId } from '../autoGenerated';
import { IClientUser } from '../clientUser';
import * as TransactionFactory from '../transaction';
import TransactionType from '../transactionType';

export type IRecipient = TransactionFactory.IRecipient;
export type IAgent = TransactionFactory.IAgent;

/**
 * 取引開始パラメーターインターフェース
 */
export type IStartParams<T extends AccountType> = TransactionFactory.IStartParams<TransactionType.Withdraw, IAgent, IRecipient, IObject<T>>;

export type IResult = any;

/**
 * エラーインターフェース
 */
export type IError = any;

/**
 * 取引対象物インターフェース
 */
export interface IObject<T extends AccountType> {
    clientUser?: IClientUser;
    /**
     * 金額
     */
    amount: number;
    /**
     * 出金元
     */
    fromLocation: IAccount<T>;
    /**
     * 出金先
     */
    toLocation?: IAnonymousLocation;
    description?: string;
}

export interface IPotentialActions<T extends AccountType> {
    moneyTransfer: IMoneyTransferActionAttributes<T>;
}

export type ITransaction<T extends AccountType> = IExtendId<IAttributes<T>>;

/**
 * 出金取引インターフェース
 */
export interface IAttributes<T extends AccountType>
    extends TransactionFactory.IAttributes<IStartParams<T>, IResult, IError, IPotentialActions<T>> {
}
